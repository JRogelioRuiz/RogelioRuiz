#include <iostream>
#include "LinkedList.h"
#include <random>
#include <chrono>
using namespace std;

template <class T>
LinkedList<T> createList(int quantity, T upperLimit, char type)
{ 
    LinkedList<T> list;

    if (type == 'i' || type == 'c') {
        for (int i = 0; i < quantity; i++)
        {

            // Semilla para el generador de números aleatorios
            random_device rd;
            mt19937 generator(rd()); // Mersenne Twister engine

            // rango de números
            int minNumber;
            (type == 'c') ? minNumber = 33 : minNumber = 1;
            int maxNumber = upperLimit;

            // Distribución de enteros uniformes
            uniform_int_distribution<int> distribution(minNumber, maxNumber);

            int num = distribution(generator);

            list.addLast(num);
        }
        return list;
    }
    if (type == 'd')
    {
        std::random_device rd;  // Will be used to obtain a seed for the random number engine
        std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
        
        int minNumber = 1.0;
        int maxNumber = upperLimit;

        std::uniform_real_distribution<> dis(minNumber, maxNumber);
        
        for (int n = 0; n < quantity; ++n)
        {
            // Use dis to transform the random unsigned int generated by gen into a 
            // double in [1, 2). Each call to dis(gen) generates a new random double
            float num = dis(gen);
            list.addLast(num);
        }
        return list;
    }
}


int main() {
    // LinkedList<string> list;
    // list.addFirst("Olla");
    // list.addFirst("Estufa");
    // list.addFirst("Jarra");
    // list.addFirst("Plato");
    // list.print();
    // cout << list.getSize() << endl;
    // list.addLast("Sarten");
    // list.print();
    // cout << list.getSize() << endl;
    // try {
    //     list.insertAfter(1,"Cuchara");
    // } catch (out_of_range& e) {
    //     cout << e.what() << endl;
    // }
    // list.print();
    // cout << list.findData("Cuchara") << endl;
    // try {
    //     list.updateData("Cuchara", "Tenedor");
    // } catch (out_of_range& e) {
    //     cout << e.what() << endl;
    // }

    // list.print();
    // cout << list.getData(0) << " " << list.getData(2) << endl;
    // try {
    //     cout << list.getData(10) << endl;
    // } catch (out_of_range& e) {
    //     cout << e.what() << endl;
    // }
    // cout << list[0] << " " << list[2] << endl;
    // try {
    //     cout << list[10] << endl;
    // } catch (out_of_range& e) {
    //     cout << e.what() << endl;
    // }
    // list[0] = "Platón";
    // list.print();
    // list.deleteData("Platón");
    // list.print();
    // list.deleteData("Cuchara");
    // list.print();
    // list.deleteAt(0);
    // list.print();
    // cout << "Borra posición 2" << endl;
    // list.deleteAt(1);
    // list.print();

    // cout<<"\n\n\n\n\n";

    // LinkedList<string> lista2;
    // lista2.addFirst("asdf1");
    // lista2.addFirst("asdf2");    
    // lista2.addFirst("asdf3");
    // lista2.addFirst("asdf4");

    // LinkedList<string> lista3;
    // lista3.addFirst("fdas1");
    // lista3.addFirst("fdas2");    
    // lista3.addFirst("fdas3");
    // lista3.addFirst("fdas4");

    // lista2.print();
    // lista3.print();

    // lista3 = lista2;
    // cout<<endl;
    // lista3.print();
    // cout<<endl;    
    // lista2.print();


    // lista3.print();

// Menu

int input = 1;
int tipoLista = 0;

LinkedList<int> listI;
LinkedList<double> listD;

cout<<"¿De qué tipo de dato quieres que sea la lista?\n1. Enteros Positivos\n2. Doubles Positivos\n";

cin>>tipoLista;

while (tipoLista != 1 && tipoLista != 2) {
    cout<<"Tpo de dato no disponible, Ingrese nuevamente: \n¿De qué tipo de dato quieres que sea la lista?\n1. Enteros Positivos\n2. Doubles Positivos\n";
    cin>>tipoLista; 
}

if (tipoLista == 1) {
    int input2 = 0;
    cout<<"Elija una opción:\n1. Lista aleatoria\n2. Ingresar lista\n";
    cin>>input2;
    
    while (input2 != 1 && input2 != 2) {
        cout<<"Elija una opción:\n1. Lista aleatoria\n2. Ingresar lista\n";
        cin>>input2;
    }
   
    if (input2 == 1) {
        listI = createList(20,100,'i');
        listI.print();
    } 
    else if (input2 == 2) {
        int inputInt = 0;
        cout<<"ingrese los valores para la lista:  (ingrese -1 para terminar)\n";
        while (inputInt >= 0) {
            cin>>inputInt;
            if (inputInt >= 0) listI.addLast(inputInt);
        }     
        listI.print();
    } 

}
else if (tipoLista == 2) {
    int input2 = 0;
    cout<<"Elija una opción:\n1. Lista aleatoria\n2. Ingresar lista\n";
    cin>>input2;
    
    while (input2 != 1 && input2 != 2) {
        cout<<"Elija una opción:\n1. Lista aleatoria\n2. Ingresar lista\n";
        cin>>input2;
    }
   
    if (input2 == 1) {
        listD = createList(20,100.5,'d');
        listD.print();
    } 
    else if (input2 == 2) {
        int inputDouble = 0;
        cout<<"ingrese 20 valores para la lista: (ingrese -1 para terminar)\n";
        while (inputDouble >= 0) {
            cin>>inputDouble;
            if (inputDouble >= 0) listD.addLast(inputDouble);
        }     
        listD.print();
    } 
}

while (input) {
    cout<<"\n¿Qué desea hacer con la lista?\n";
    cout<<"1. Agregar un elemento al principio de la lista\n2. Agregar un elemento al final de la lista\n3. Insertar un elemento a la derecha de un índice dado\n4. Borrar un elemento dado de la lista\n";
    cout<<"5. Borrar un elemento en una posicion de la lista\n6.Obtener el elemento de una posición dada de la lista\n7. Actualizar un elemento dado de la lista\n8. Actualizar un elemento que se encuentra en una posicion dada de la lista\n";
    cout<<"9. Encuentra un elemento en la lista\n10. Iguala una lista con los datos de otra lista\n0. Salir\n";
    cin>>input;

    while (input != 1 && input != 2 && input != 3 && input != 4 && input != 5 && input != 6 && input != 7 && input != 8 && input != 9 && input != 10 && input != 0) {
        printf("\nOpcion no valida\n");
        cout<<"\n¿Qué desea hacer con la lista?\n";
        cout<<"1. Agregar un elemento al principio de la lista\n2. Agregar un elemento al final de la lista\n3. Insertar un elemento a la derecha de un índice dado\n4. Borrar un elemento dado de la lista\n";
        cout<<"5. Borrar un elemento en una posicion de la lista\n6.Obtener el elemento de una posición dada de la lista\n7. Actualizar un elemento dado de la lista\n8. Actualizar un elemento que se encuentra en una posicion dada de la lista\n";
        cout<<"9. Encuentra un elemento en la lista\n10. Iguala una lista con los datos de otra lista\n0. Salir\n";
        cin>>input;
    }

    if (input == 1) {
        cout<<"Ingrese el elemento que desea agregar al principio de la lista:\n";
        if (tipoLista == 1)  {
            int add = 0;
            cin>>add;
            listI.addFirst(add);
            listI.print();
        } else if (tipoLista == 2)  {
            double add = 0;
            cin>>add;
            listD.addFirst(add);
            listD.print();
        } 
    } else if (input == 2) {
        cout<<"Ingrese el elemento que desea agregar al final de la lista:\n";
        if (tipoLista == 1)  {
            int add = 0;
            cin>>add;
            listI.addLast(add);
            listI.print();
        } else if (tipoLista == 2)  {
            double add = 0;
            cin>>add;
            listD.addLast(add);
            listD.print();
        } 
    } else if (input == 3) {
        cout<<"Ingrese el elemento que desea insertar: ";
        int indice = 0;
        if (tipoLista == 1)  {
            int add = 0;
            cin>>add;
            cout<<"Inserte el Indice a la izquierda de la posicion donde desea insertar el elemento: ";
            cin>>indice;
            listI.insertAfter(indice,add);
            listI.print();
        } else if (tipoLista == 2)  {
            double add = 0;
            cin>>add;
            cout<<"Inserte el Indice a la izquierda de la posicion donde desea insertar el elemento: ";
            cin>>indice;
            listD.insertAfter(indice,add);
            listD.print();
        } 
    } else if (input == 4) {
        cout<<"Ingrese el elemento que desea borrar de la lista:\n";
        if (tipoLista == 1)  {
            int remove = 0;
            cin>>remove;
            listI.deleteData(remove);
            listI.print();
        } else if (tipoLista == 2)  {
            double remove = 0;
            cin>>remove;
            listD.deleteData(remove);
            listD.print();
        } 
    } else if (input == 5) {
        cout<<"Ingrese el Indice del elemento que desea borrar ";
        int indice = 0;
        cin>>indice;
        if (tipoLista == 1)  {
            listI.deleteAt(indice);
            listI.print();
        } else if (tipoLista == 2)  {
            listD.deleteAt(indice);
            listD.print();
        } 
    } else if (input == 6) {
        cout<<"Ingrese el Indice del elemento que desea obtener ";
        int indice = 0;
        cin>>indice;
        if (tipoLista == 1)  {
            cout<<"El elemento en esa posición es: "<<listI[indice];
        } else if (tipoLista == 2)  {
            cout<<"El elemento en esa posición es: "<<listD[indice];
        }
    } else if (input == 7) {
        cout<<"Ingrese el elemento que desea actualizar:\n";
        if (tipoLista == 1)  {
            int elemento = 0;
            cin>>elemento;
            cout<<"Ingrese el elemento que lo reemplazará: \n";
            int elemento2 = 0;
            cin>>elemento2;
            listI.updateData(elemento,elemento2);
            listI.print();
        } else if (tipoLista == 2)  {
            double elemento = 0;
            cin>>elemento;
            cout<<"Ingrese el elemento que lo reemplazará: \n";
            double  elemento2 = 0;
            cin>>elemento2;
            listD.updateData(elemento,elemento2);
            listD.print();
        }
    } else if (input == 8) {
        cout<<"Ingrese el Indice del elemento que desea actualizar ";
        int indice = 0;
        cin>>indice;
        if (tipoLista == 1)  {
            int newD = 0;
            cout<<"Ingrese el elemento que lo reemplazará: ";
            cin>>newD;
            listI[indice] = newD;
        } else if (tipoLista == 2)  {
            double newD = 0;
            cout<<"Ingrese el elemento que lo reemplazará: ";
            cin>>newD;
            listD[indice] = newD;
        }
    } else if (input == 9) { 
        cout<<"Ingrese el elemento que desea encontrar en la lista: ";
        if (tipoLista == 1)  {
            int elemento = 0;
            cin>>elemento;
            if (listI.findData(elemento) != -1)
            cout<<"El elemento se encuentra en el indice: "<<listI.findData(elemento)<<endl;
            else
            cout<<"El elemento no se encuentra en la lista\n";
        } else if (tipoLista == 2)  {
            double elemento = 0;
            cin>>elemento;
            if (listD.findData(elemento) != -1)
            cout<<"El elemento se encuentra en el indice: "<<listD.findData(elemento)<<endl;
            else
            cout<<"El elemento no se encuentra en la lista\n";
        }  
    } else if (input == 10)  {
        cout<<"Ingrese los valores de la lista que reemplazará la actual: (ingrese -1 para ternminar)\n";
        if(tipoLista == 1) {
            LinkedList<int> listaI2;
            int elInput = 0;
            while (elInput >= 0) {
                cin>>elInput;
                if(elInput >= 0) listaI2.addLast(elInput);
            }
            listI = listaI2;
            listI.print();
        }
        if(tipoLista == 2) {
            LinkedList<double> listaD2;
            double elInput = 0;
            while (elInput >= 0) {
                cin>>elInput;
                if(elInput >= 0) listaD2.addLast(elInput);
            }
            listD = listaD2;
            listD.print();
        }
        
    }

}
    return 0;
} 